plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.liquibase.gradle' version '2.2.0'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'org.owasp.dependencycheck' version '9.0.7'
}

group = 'com.example'
version = '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

spotless {
    java {
        palantirJavaFormat('2.50.0')
                .style('PALANTIR')
                .formatJavadoc(true)
        importOrder('com', 'jakarta', 'lombok', 'org', '', 'javax|java', '\\#')
        removeUnusedImports()
        formatAnnotations()
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.mapstruct:mapstruct:1.6.2'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'

    // Monitoring and metrics
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Test dependencies
    testCompileOnly 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:testcontainers:1.19.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.testcontainers:postgresql:1.19.3'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport
}

tasks.jacocoTestReport {
    dependsOn tasks.test // Ensure tests run before generating the report

    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/mapper/**', '**/StoreApplication.class'])
        })
    }
}

// SonarQube configuration
sonar {
    properties {
        property 'sonar.projectKey', 'store-app'
        property 'sonar.projectName', 'Store Application'
        property 'sonar.projectVersion', project.version
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property 'sonar.exclusions', '**/mapper/**, **/*Application.java'
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
    }
}

// Dependency Check configuration
dependencyCheck {
    format = 'HTML'
    outputDirectory = "${buildDir}/reports"
    scanConfigurations = ['runtimeClasspath']
    suppressionFile = 'dependency-check-suppressions.xml'
    failBuildOnCVSS = 7.0
}

// JaCoCo test coverage verification
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.70
            }
        }
        rule {
            element = 'CLASS'
            excludes = ['com.securitease.store.mapper.*', 'com.securitease.store.StoreApplication']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }
        }
    }
}

// Custom task for integration tests
task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    include '**/integration/**'
    shouldRunAfter test
}