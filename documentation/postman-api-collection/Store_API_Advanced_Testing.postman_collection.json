{
  "info": {
    "name": "Store API - Advanced Exception Testing",
    "description": "Advanced test collection with automated assertions for Store API exception handling",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8081",
      "type": "string"
    },
    {
      "key": "created_customer_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Success Cases",
      "item": [
        {
          "name": "Get All Customers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/customers",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers"]
            }
          }
        },
        {
          "name": "Get Customer by ID (Valid)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has customer structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('orders');",
                  "    pm.expect(jsonData.id).to.eql(1);",
                  "});",
                  "",
                  "pm.test('Orders is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.orders).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/customers/1",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers", "1"]
            }
          }
        },
        {
          "name": "Create Valid Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has customer structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('orders');",
                  "    pm.expect(jsonData.name).to.eql('Test Customer via Postman');",
                  "});",
                  "",
                  "pm.test('Location header is present', function () {",
                  "    pm.expect(pm.response.headers.get('Location')).to.not.be.null;",
                  "});",
                  "",
                  "// Save customer ID for later tests",
                  "const jsonData = pm.response.json();",
                  "pm.collectionVariables.set('created_customer_id', jsonData.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Customer via Postman\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/customers",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Resource Not Found (404)",
      "item": [
        {
          "name": "Get Non-existent Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('path');",
                  "});",
                  "",
                  "pm.test('Error details are correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(404);",
                  "    pm.expect(jsonData.error).to.eql('RESOURCE_NOT_FOUND');",
                  "    pm.expect(jsonData.message).to.include('Customer not found with id: 99999');",
                  "    pm.expect(jsonData.path).to.include('/api/v1/customers/99999');",
                  "});",
                  "",
                  "pm.test('Timestamp is valid ISO format', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const timestamp = new Date(jsonData.timestamp);",
                  "    pm.expect(timestamp.toISOString()).to.not.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/customers/99999",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers", "99999"]
            }
          }
        },
        {
          "name": "Update Non-existent Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error is ResourceNotFoundException', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('RESOURCE_NOT_FOUND');",
                  "    pm.expect(jsonData.message).to.include('Customer not found with id: 99999');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Customer Name\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/customers/99999",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers", "99999"]
            }
          }
        },
        {
          "name": "Delete Non-existent Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error is ResourceNotFoundException', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('RESOURCE_NOT_FOUND');",
                  "    pm.expect(jsonData.message).to.include('Customer not found with id: 99999');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/customers/99999",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers", "99999"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Validation Errors (400)",
      "item": [
        {
          "name": "Create Customer - Empty Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation error structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('errors');",
                  "});",
                  "",
                  "pm.test('Validation error details are correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(400);",
                  "    pm.expect(jsonData.message).to.eql('Request validation failed');",
                  "    pm.expect(jsonData.errors).to.have.property('name');",
                  "    pm.expect(jsonData.errors.name).to.include('Customer name is required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/customers",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers"]
            }
          }
        },
        {
          "name": "Create Customer - Missing Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for missing name', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(400);",
                  "    pm.expect(jsonData.errors).to.have.property('name');",
                  "    pm.expect(jsonData.errors.name).to.include('Customer name is required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/customers",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Malformed JSON (400)",
      "item": [
        {
          "name": "Create Customer - Invalid JSON",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has malformed JSON error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('path');",
                  "});",
                  "",
                  "pm.test('Malformed JSON error details are correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(400);",
                  "    pm.expect(jsonData.error).to.eql('MALFORMED_JSON');",
                  "    pm.expect(jsonData.message).to.eql('Request body is missing or malformed JSON');",
                  "    pm.expect(jsonData.path).to.include('/api/v1/customers');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"name\": invalid}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/customers",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers"]
            }
          }
        },
        {
          "name": "Create Customer - Empty Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error is malformed JSON or bad request', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(400);",
                  "    // Could be malformed JSON or bad request depending on Spring handling",
                  "    pm.expect([400]).to.include(jsonData.status);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{base_url}}/api/v1/customers",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Cleanup & Additional Tests",
      "item": [
        {
          "name": "Get Customer - Invalid ID Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 404', function () {",
                  "    // Could be 400 (Bad Request) for invalid format or 404 if Spring converts it",
                  "    pm.expect([400, 404]).to.include(pm.response.code);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/customers/invalid-id",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers", "invalid-id"]
            }
          }
        },
        {
          "name": "Delete Created Customer (Cleanup)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Response body is empty', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/customers/{{created_customer_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers", "{{created_customer_id}}"]
            }
          }
        },
        {
          "name": "Verify Deleted Customer Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error is ResourceNotFoundException', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('RESOURCE_NOT_FOUND');",
                  "    pm.expect(jsonData.message).to.include('Customer not found with id:');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/customers/{{created_customer_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers", "{{created_customer_id}}"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "console.log('🚀 Starting test: ' + pm.info.requestName);",
          "console.log('📍 URL: ' + pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "console.log('✅ Completed test: ' + pm.info.requestName);",
          "console.log('📊 Status: ' + pm.response.code + ' ' + pm.response.status);",
          "console.log('⏱️ Response time: ' + pm.response.responseTime + 'ms');",
          "",
          "// Global test to ensure we always get a response",
          "pm.test('Response received', function () {",
          "    pm.response.to.not.be.undefined;",
          "});",
          "",
          "// Global test for response time",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});"
        ]
      }
    }
  ]
}